// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model ApiKey {
  id            Int      @id @default(autoincrement())
  key           String   @unique @default(cuid())
  name          String   @default("Secret key")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deleted       Boolean  @default(false)
  deletedBy     User?    @relation(fields: [deletedById], references: [id])
  deletedById   String?
  deletedAt     DateTime?
  deletedReason String?
  userId        String

  @@map(name: "api_keys")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique @default(cuid())
  usernameChanged Boolean  @default(false) @map(name: "username_changed")
  email         String?   @unique
  emailVerified DateTime?
  bio           String?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  networks SocialNetwork[]
  accounts Account[]
  sessions Session[]
  apiKeys  ApiKey[]
  Post     Post[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  @@map(name: "users")
}

model SocialNetwork {
  id        String   @id @default(cuid())
  name      String
  url       String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  users User[]

  @@map(name: "platforms")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   Json?
  published Boolean  @default(false)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  authorId  String

  author User @relation(fields: [authorId], references: [id])

  @@map(name: "posts")
}

model Job {
  id           String   @id @default(cuid())
  title        String
  description  String
  published    Boolean  @default(false)
  
  urls      JobUrl[]
  credentials JobCredentials[]
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
}

model JobUrl {
  id        String   @id @default(cuid())
  jobId     String
  url       String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  job Job @relation(fields: [jobId], references: [id])
}

model JobCredentials {
  id        String   @id @default(cuid())
  jobId     String
  label     String
  username  String
  password  String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  job Job @relation(fields: [jobId], references: [id])
}